services:
  keycloak:
    deploy:
      replicas: 0
    image: quay.io/keycloak/keycloak:25.0.4
    ports:
      - "8070:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev
    networks:
      - app-network
  postgres:
    deploy:
      replicas: 1
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: chunkmydocs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  s3:
    deploy:
      replicas: 0
    image: minio/minio:RELEASE.2023-09-27T15-22-50Z
    ports:
      - 9000:9000
      - 42625:42625
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://s3:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - s3-data:/data
    command: server --console-address ":42625" /data
    networks:
      - app-network

  s3-client:
    deploy:
      replicas: 0
    image: minio/mc
    depends_on:
      s3:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      mc config host add myminio http://s3:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc alias set myminio http://s3:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};

      mc admin user add myminio ${AWS__ACCESS_KEY} ${AWS__SECRET_KEY};
      mc admin policy attach myminio readwrite --user ${AWS__ACCESS_KEY};

      mc mb myminio/${EXTRACTION__S3_BUCKET};


      exit 0;
      "

  redis:
    image: redis:7.2.2
    deploy:
      replicas: 0
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server

  rrq:
    image: luminainc/rrq:a11fcf8
    deploy:
      replicas: 0
    depends_on:
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
    environment:
      - REDIS__URL=${RRQ_REDIS_URL}
      - API_KEY=${RRQ_API_KEY}
      - VERSION=${RRQ_VERSION}
    ports:
      - "8010:8000"

  pdla:
    image: luminainc/pdla:7bd05a1
    restart: on-failure
    deploy:
      replicas: 0
    networks:
      - app-network
    ports:
      - "8011:8000"
    command:
      [
        "gunicorn",
        "-k",
        "uvicorn.workers.UvicornWorker",
        "--chdir",
        "./src",
        "app:app",
        "--bind",
        "0.0.0.0:8000",
        "--timeout",
        "10000",
      ]

  chunkmydocs:
    image: luminainc/chunkmydocs:latest
    restart: on-failure
    deploy:
      replicas: 0
    environment:
      - PG__URL=${PG__URL}
      - PG__POOL__MAX_SIZE=${PG__POOL__MAX_SIZE}
      - RRQ__URL=${RRQ__URL}
      - EXTRACTION__VERSION=${EXTRACTION__VERSION}
      - EXTRACTION__EXTRACTION_QUEUE=${EXTRACTION__EXTRACTION_QUEUE}
      - EXTRACTION__GROBID_URL=${EXTRACTION__GROBID_URL}
      - EXTRACTION__PDLA_URL=${EXTRACTION__PDLA_URL}
      - EXTRACTION__PDLA_FAST_URL=${EXTRACTION__PDLA_FAST_URL}
      - EXTRACTION__TABLE_OCR_URL=${EXTRACTION__TABLE_OCR_URL}
      - EXTRACTION__TASK_EXPIRATION=${EXTRACTION__TASK_EXPIRATION}
      - EXTRACTION__S3_BUCKET=${EXTRACTION__S3_BUCKET}
      - EXTRACTION__BATCH_SIZE=${EXTRACTION__BATCH_SIZE}
      - EXTRACTION__BASE_URL=${EXTRACTION__BASE_URL}
      - AWS__ENDPOINT=${AWS__ENDPOINT}
      - AWS__ACCESS_KEY=${AWS__ACCESS_KEY}
      - AWS__SECRET_KEY=${AWS__SECRET_KEY}
      - AWS__REGION=${AWS__REGION}
    networks:
      - app-network

  task-processor:
    image: luminainc/task-processor:latest
    restart: on-failure
    deploy:
      replicas: 0
    environment:
      - PG__URL=${PG__URL}
      - PG__POOL__MAX_SIZE=${PG__POOL__MAX_SIZE}
      - RRQ__URL=${RRQ__URL}
      - EXTRACTION__VERSION=${EXTRACTION__VERSION}
      - EXTRACTION__EXTRACTION_QUEUE=${EXTRACTION__EXTRACTION_QUEUE}
      - EXTRACTION__GROBID_URL=${EXTRACTION__GROBID_URL}
      - EXTRACTION__PDLA_URL=${EXTRACTION__PDLA_URL}
      - EXTRACTION__PDLA_FAST_URL=${EXTRACTION__PDLA_FAST_URL}
      - EXTRACTION__TABLE_OCR_URL=${EXTRACTION__TABLE_OCR_URL}
      - EXTRACTION__TASK_EXPIRATION=${EXTRACTION__TASK_EXPIRATION}
      - EXTRACTION__S3_BUCKET=${EXTRACTION__S3_BUCKET}
      - EXTRACTION__BATCH_SIZE=${EXTRACTION__BATCH_SIZE}
      - EXTRACTION__BASE_URL=${EXTRACTION__BASE_URL}
      - AWS__ENDPOINT=${AWS__ENDPOINT}
      - AWS__ACCESS_KEY=${AWS__ACCESS_KEY}
      - AWS__SECRET_KEY=${AWS__SECRET_KEY}
      - AWS__REGION=${AWS__REGION}
    networks:
      - app-network

  web:
    image: luminainc/web:c69d5ff
    restart: on-failure
    deploy:
      replicas: 0
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_KEYCLOAK_URL=${VITE_KEYCLOAK_URL}
      - VITE_KEYCLOAK_REALM=${VITE_KEYCLOAK_REALM}
      - VITE_KEYCLOAK_CLIENT_ID=${VITE_KEYCLOAK_CLIENT_ID}
      - VITE_STRIPE_API_KEY=${VITE_STRIPE_API_KEY}
      - VITE_KEYCLOAK_REDIRECT_URI=${VITE_KEYCLOAK_REDIRECT_URI}
      - VITE_KEYCLOAK_POST_LOGOUT_REDIRECT_URI=${VITE_KEYCLOAK_POST_LOGOUT_REDIRECT_URI}
    ports:
      - "80:8000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  s3-data:
  redis-data:
